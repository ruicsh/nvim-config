{
  "ternary": {
    "prefix": "3",
    "body": "${1:cond} ? ${2:true} : ${3:false}",
    "description": "${1} ? ${2} : ${3}"
  },
  "ternary-assignemt": {
    "prefix": "=3",
    "body": "const ${0:var} = ${1:cond} ? ${2:true} : ${3:false}",
    "description": "const ${0} = ${1} ? ${2} : ${3}"
  },
  "export": {
    "prefix": "e",
    "body": "export $0",
    "description": "export $0"
  },
  "export-asignment": {
    "prefix": "e=",
    "body": "export const ${1:var}=$0",
    "description": "export const ${1}=$0"
  },
  "export-function": {
    "prefix": "ef",
    "body": [
      "export function ${1:name}($2) {",
      "\t$0",
      "}"
    ],
    "description": "export const ${1}=$0"
  },
  "export-arrow-function": {
    "prefix": "ef>",
    "body": [
      "export ($1) => {",
      "\t$0",
      "}"
    ],
    "description": "export ($2) => {"
  },
  "export-async-function": {
    "prefix": "efa",
    "body": [
      "export async function ${1:name}($2) {",
      "\t$0",
      "}"
    ],
    "description": "export async function ${1:name}($2:args) {"
  },
  "export-async-arrow-function": {
    "prefix": "efa>",
    "body": [
      "export async ($1) => {",
      "\t$0",
      "}"
    ],
    "description": "export ($2) => {"
  },
  "function": {
    "prefix": "f",
    "body": [
      "function ${1:name}($2) {",
      "\t$0",
      "}"
    ],
    "description": "function ${1}($2) {"
  },
  "function-arrow": {
    "prefix": "f>",
    "body": [
      "($1) => {",
      "\t$0",
      "}"
    ],
    "description": "($1) => { $0 }"
  },
  "function-arrow-assignment": {
    "prefix": "f>=",
    "body": [
      "const ${1:name} = ($2) => {",
      "\t$0",
      "}"
    ],
    "description": "const ${1} = ($2) => {"
  },
  "function-async": {
    "prefix": "fa",
    "body": [
      "async function ${1:name}($2) {",
      "\t$0",
      "}"
    ],
    "description": "async function ${1}($2) {"
  },
  "function-async-arrow": {
    "prefix": "fa>",
    "body": [
      "async ($1) => {",
      "\t$0",
      "}"
    ],
    "description": "async ($1) => { $0 }"
  },
  "function-async-assignment": {
    "prefix": "fa=",
    "body": [
      "const ${1:name} = async function ($2) {",
      "\t$0",
      "}"
    ],
    "description": "const ${1:name} = async function ($3) { $0 }"
  },
  "function-async-arrow-assignment": {
    "prefix": "=fa>",
    "body": [
      "const ${1:name} = async ($2) => {",
      "\t$0",
      "}"
    ],
    "description": "const ${1} = async ($2) => { $0 }"
  },
  "function-method": {
    "prefix": "f,",
    "body": [
      "${1:name}($2) {",
      "\t$0",
      "},"
    ],
    "description": "${1}($2) { $0 },"
  },
  "function-method-async": {
    "prefix": "f,a",
    "body": [
      "async ${1:name}($2) {",
      "\t$0",
      "},"
    ],
    "description": "${1}($2) { $0 },"
  },
  "function-method-arrow": {
    "prefix": "f,>",
    "body": [
      "${1:name} = ($2) => {",
      "\t$0",
      "},"
    ],
    "description": "${1:name} = ($2) => { $0 },"
  },
  "function-method-async-arrow": {
    "prefix": "f,a>",
    "body": [
      "${1:name} = async ($2) => {",
      "\t$0",
      "},"
    ],
    "description": "${1:name} = async ($2) => { $0 },"
  },
  "for": {
    "prefix": "for",
    "body": [
      "for (let ${1:i} = 0; ${1:i} < ${2:array}.length; ${1:i}++) {",
      "\t$0",
      "}"
    ],
    "description": "for (let ${1} = 0; ${1} < ${2}.length; ${1}++) {"
  },
  "for-of-async": {
    "prefix": "forofa",
    "body": [
      "for await (const ${1:item} of ${2:object}) {",
      "\t$0",
      "}"
    ],
    "description": "for await (const ${1} of ${2}) {"
  },
  "for-in": {
    "prefix": "forin",
    "body": [
      "for (const ${1:key} in ${2:object}) {",
      "\t$0",
      "}"
    ],
    "description": "for (const ${1:key} in ${2:object}) {"
  },
  "for-key-value": {
    "prefix": "forkv",
    "body": [
      "for (const [key, value] of Object.entries(${1:object})) {",
      "\t$0",
      "}"
    ],
    "description": "for (const [key, value] of Object.entries(${1})) {"
  },
  "for-of": {
    "prefix": "forof",
    "body": [
      "for (const ${1:item} of ${2:array}) {",
      "\t$0",
      "}"
    ],
    "description": "for (const ${1} of ${2}) { $0 }"
  },
  "if": {
    "prefix": "if",
    "body": [
      "if (${1:condition}) {",
      "\t$0",
      "}"
    ],
    "description": "if (${1}) { $0 }"
  },
  "if-else": {
    "prefix": "ife",
    "body": [
      "if (${1:condition}) {",
      "\t$2",
      "} else {",
      "\t$0",
      "}"
    ],
    "description": "if (${1}) { $2 } else { $0 }"
  },
  "else": {
    "prefix": "e",
    "body": [
      "} else {",
      "\t$0",
      "}"
    ],
    "description": "} else { $0 }"
  },
  "else-if": {
    "prefix": "eif",
    "body": [
      "} else if (${1:condition}) {",
      "\t$0",
      "}"
    ],
    "description": "} else if (${1}) { $0 }"
  },
  "if-else-if": {
    "prefix": "ifei",
    "body": [
      "if (${1:condition}) {",
      "\t$0",
      "} else if (${2:condition}) {",
      "\t$3",
      "}"
    ],
    "description": "if (${1}) { $0 } else if (${2}) { $3 }"
  },
  "json-stringify": {
    "prefix": "js",
    "body": "JSON.stringify(${0:object})",
    "description": "JSON.stringify($0)"
  },
  "json-parse": {
    "prefix": "jp",
    "body": "JSON.parse(${0:object})",
    "description": "JSON.parse($0)"
  },
  "object-keys": {
    "prefix": "ok",
    "body": "Object.keys(${0:object})",
    "description": "Object.keys(${0})"
  },
  "object-values": {
    "prefix": "ov",
    "body": "Object.values(${0:object})",
    "description": "Object.values(${0})"
  },
  "object-entries": {
    "prefix": "oe",
    "body": "Object.entries(${0:object})",
    "description": "Object.entries(${0})"
  },
  "return": {
    "prefix": "r",
    "body": "return"
  },
  "return-value": {
    "prefix": "rv",
    "body": "return ${0:value}",
    "description": "return ${0}"
  },
  "return-arrow-function": {
    "prefix": "r>",
    "body": "return (${1:arguments}) => ${2:statement}"
  },
  "return-this": {
    "prefix": "rt",
    "body": "return ${0:this}"
  },
  "return-dict": {
    "prefix": "r{",
    "body": "return {\n\t${0}\n}"
  },
  "return-array": {
    "prefix": "r[",
    "body": "return [\n\t${0}\n]"
  },
  "return-promise": {
    "prefix": "rp",
    "body": "return new Promise((resolve, reject) => {\n\t${0}\n})"
  },
  "switch": {
    "prefix": "s",
    "body": [
      "switch (${1:key}) {",
      "\tcase ${2:value}: {",
      "\t\t$0",
      "\tbreak;",
      "}",
      "\tdefault: {",
      "\t\tbreak;",
      "\t}",
      "}"
    ],
    "description": "switch(${1}) {"
  },
  "switch-case": {
    "prefix": "sc",
    "body": [
      "case ${1:value}: {",
      "\t$0",
      "\tbreak;",
      "}"
    ],
    "description": "case ${1} { $0 }"
  },
  "switch-default": {
    "prefix": "sd",
    "body": [
      "default: {",
      "\t$0",
      "\tbreak;",
      "}"
    ],
    "description": "default { $0 }"
  },
  "set-timeout": {
    "prefix": "st",
    "body": [
      "setTimeout(() => {",
      "\t$0",
      "}, ${1:timeout});"
    ],
    "description": "setTimeout(() => { $0 }, ${1});"
  },
  "set-interval": {
    "prefix": "si",
    "body": [
      "setInterval(() => {",
      "\t$0",
      "}, ${1:interval});"
    ],
    "description": "setInterval(() => { $0 }, ${1});"
  },
  "try-catch": {
    "prefix": "t",
    "body": [
      "try {",
      "\t$0",
      "} catch (${1:error}) {",
      "",
      "}"
    ],
    "description": "try { $0 } catch (error) { }"
  },
  "try-catch-finally": {
    "prefix": "tc",
    "body": [
      "try {",
      "\t$0",
      "} catch (${1:error}) {",
      "\t$2",
      "} finally {",
      "\t$3",
      "}"
    ],
    "description": "try { $0 } catch (error) { $2 } finally { $3 }"
  },
  "while": {
    "prefix": "w",
    "body": [
      "while (${1:condition}) {",
      "\t$0",
      "}"
    ],
    "description": "while (${1:condition}) {"
  },
  "while-do": {
    "prefix": "wd",
    "body": [
      "do {",
      "\t$0",
      "} while (${1:condition});"
    ],
    "description": "do { $0 } while (${1});"
  },
  "yield": {
    "prefix": "y",
    "body": "yield ${0}",
    "description": "yield ${0}"
  }
}
