{
  "ternary": {
    "prefix": "3",
    "body": "${1:cond} and ${2:true} or ${3:false}",
    "description": "${1} and ${2} or ${3}"
  },
  "ternary-assignment": {
    "prefix": "=3",
    "body": "local ${0:var} = ${1:cond} and ${2:true} or ${3:false}",
    "description": "local ${0} = ${1} and ${2} or ${3}"
  },
  "assigment": {
    "prefix": "=",
    "body": "local ${1:varName} = ${0:value}",
    "description": "local ${1:varName} = ${0:value}"
  },
  "require": {
    "prefix": "req",
    "body": "require(${1:module})",
    "description": "require(${1:module})"
  },
  "return": {
    "prefix": "r",
    "body": "return",
    "description": "return"
  },
  "return-value": {
    "prefix": "rv",
    "body": "return $0",
    "description": "return $0"
  },
  "variable": {
    "prefix": "v",
    "body": "local ${0:name}",
    "description": "local ${0}"
  },
  "variable-assignment": {
    "prefix": "v=",
    "body": "local ${1:name} = ${0:value}",
    "description": "local ${1} = ${0}"
  },
  "lreq": {
    "prefix": "lreq",
    "body": "local ${1:module} = require(\"${2:$1}\")$0",
    "description": "local ${1:module} = require(\"${2:$1}\")$0"
  },
  "class": {
    "prefix": "cl",
    "body": [
      "${1:M} = {}\n",
      "$1.${2:new} = function($3)",
      "\t${6}",
      "end"
    ],
    "description": "$1.${2:new} = function($3)"
  },
  "if": {
    "prefix": "if",
    "body": [
      "if ${1:condition} then",
      "\t$0",
      "end"
    ],
    "description": "if ${1} then"
  },
  "if-else": {
    "prefix": "ife",
    "body": [
      "if ${1:condition} then",
      "\t$2",
      "else",
      "\t$0",
      "end"
    ],
    "description": "if ${1} then $2 else $0 end"
  },
  "if-else-if": {
    "prefix": "ifei",
    "body": [
      "if ${1:condition} then",
      "\t$0",
      "elseif ${2:condition} then",
      "\t$3",
      "end"
    ],
    "description": "if ${1} then $0 elseif ${2} then $3 end"
  },
  "else": {
    "prefix": "e",
    "body": [
      "else",
      "\t$0",
      "end"
    ],
    "description": "else $0"
  },
  "else-if": {
    "prefix": "eif",
    "body": [
      "elseif ${1:condition} then",
      "\t$0",
      "end"
    ],
    "description": "elseif ${1} then $0 end"
  },
  "for": {
    "prefix": "for",
    "body": [
      "for $1 do",
      "\t$0",
      "end"
    ],
    "description": "for $1 do"
  },
  "for-numeric": {
    "prefix": "forn",
    "body": [
      "for ${1:i} = ${2:1}, ${3:10} do",
      "\t$0",
      "end"
    ],
    "description": "for ${1} = ${2}, ${3} do"
  },
  "for-ipairs": {
    "prefix": "fori",
    "body": [
      "for ${1:i}, ${2:x} in ipairs(${3:t}) do",
      "\t$0",
      "end"
    ],
    "description": "for ${1}, ${2} in ipairs(${3}) do"
  },
  "for-pairs": {
    "prefix": "forp",
    "body": [
      "for ${1:k}, ${2:v} in pairs(${3:t}) do",
      "\t$0",
      "end"
    ],
    "description": "for ${1}, ${2} in pairs(${3}) do"
  },
  "function": {
    "prefix": "f",
    "body": [
      "function ${1:name}($2)",
      "\t${0}",
      "end"
    ],
    "description": "function ${1}($2)"
  },
  "function-assignment": {
    "prefix": "=f",
    "body": [
      "${1:name} = function($2)",
      "\t${0}",
      "end"
    ],
    "description": "${1} = function($2)"
  },
  "function-local": {
    "prefix": "lf",
    "body": [
      "local ${1:name} = function($2)",
      "\t${0}",
      "end"
    ],
    "description": "local ${1:name} = function($2)"
  },
  "function anonymous": {
    "prefix": "f)",
    "body": [
      "function($1)",
      "\t${0}",
      "end"
    ],
    "description": "function($1)"
  },
  "function-method": {
    "prefix": "f,",
    "body": [
      "${1:name} = function(${2})",
      "\t${0}",
      "end,"
    ],
    "description": "${1:name} = function($2)"
  },
  "print": {
    "prefix": "p",
    "body": "print(${0})",
    "description": "print(${0})"
  },
  "self": {
    "prefix": "self:",
    "body": [
      "function self:${1:methodName}($2)",
      "\t$0",
      "end"
    ],
    "description": "function self:${1:methodName}($2)"
  },
  "while": {
    "prefix": "w",
    "body": [
      "while ${1:condition} do",
      "\t$0",
      "end"
    ],
    "description": "while ${1:true} do"
  },
  "pcall": {
    "prefix": "pc",
    "body": "pcall(${1:function})",
    "description": "pcall(${1:function})"
  },
  "locpcall": {
    "prefix": "lpc",
    "body": "local ${1:status}, ${2:err_or_value} = pcall(${3:function})",
    "description": "local ${1:status}, ${2:err_or_value} = pcall(${3:function})"
  }
}
